{"ast":null,"code":"import { forwardRef, ElementRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, FormControl } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../field-control-erro/field-control-erro.component\";\nexport let InputTextComponent = /*#__PURE__*/(() => {\n  class InputTextComponent {\n    constructor(_elementRef) {\n      this._elementRef = _elementRef;\n      this.label = \"\";\n      this.id = \"\";\n      this.isRequired = false;\n      this.type = \"\";\n      this.control = new FormControl();\n\n      this.onChange = () => {};\n\n      this.onTouch = () => {};\n\n      this.isTouched = false;\n    }\n\n    ngOnInit() {\n      this.removeInvalidClass();\n    }\n\n    ngAfterViewInit() {\n      if (this.isRequired) {\n        const labelElement = this._elementRef.nativeElement.querySelector('label');\n\n        labelElement.innerHTML += ' *';\n      }\n    }\n\n    writeValue(value) {\n      this.control.setValue(value);\n    }\n\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n\n    registerOnTouched(fn) {\n      this.onTouch = fn;\n    }\n\n    setDisabledState(isDisabled) {\n      if (isDisabled) {\n        this.control.disable();\n      } else {\n        this.control.enable();\n      }\n    }\n\n    onInputChange(event) {\n      this.onChange(event.target.value);\n      this.onTouch();\n    }\n\n    onInputFocus() {\n      if (!this.isTouched) {\n        this.isTouched = true;\n      }\n    }\n\n    hasError() {\n      return this.control.invalid && this.control.touched;\n    }\n\n    getErrorMessage() {\n      var _a, _b, _c, _d;\n\n      if (this.hasError()) {\n        if ((_a = this.control.errors) === null || _a === void 0 ? void 0 : _a.required) {\n          return 'Campo obrigatório.';\n        }\n\n        if ((_b = this.control.errors) === null || _b === void 0 ? void 0 : _b.minlength) {\n          return `Mínimo de ${this.control.errors.minlength.requiredLength} caracteres.`;\n        }\n\n        if ((_c = this.control.errors) === null || _c === void 0 ? void 0 : _c.maxlength) {\n          return `Máximo de ${this.control.errors.maxlength.requiredLength} caracteres.`;\n        }\n\n        if ((_d = this.control.errors) === null || _d === void 0 ? void 0 : _d.email) {\n          return 'Campo inválido.';\n        }\n      }\n\n      return null;\n    }\n\n    getInputClass() {\n      return this.isTouched ? this.hasError() ? 'form-control is-invalid' : 'form-control' : 'form-control';\n    }\n\n    removeInvalidClass() {\n      setTimeout(() => {\n        const inputElement = document.getElementById(this.id);\n\n        if (inputElement) {\n          inputElement.classList.remove('ng-invalid');\n        }\n      });\n    }\n\n  }\n\n  InputTextComponent.ɵfac = function InputTextComponent_Factory(t) {\n    return new (t || InputTextComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  InputTextComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: InputTextComponent,\n    selectors: [[\"app-input-text\"]],\n    inputs: {\n      label: \"label\",\n      id: \"id\",\n      isRequired: \"isRequired\",\n      type: \"type\",\n      control: \"control\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => InputTextComponent),\n      multi: true\n    }])],\n    decls: 5,\n    vars: 10,\n    consts: [[1, \"form-group\"], [3, \"for\"], [3, \"type\", \"id\", \"required\", \"formControl\", \"input\", \"focus\"], [3, \"mostrarErro\", \"msgErro\"]],\n    template: function InputTextComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"label\", 1);\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"input\", 2);\n        i0.ɵɵlistener(\"input\", function InputTextComponent_Template_input_input_3_listener($event) {\n          return ctx.onInputChange($event);\n        })(\"focus\", function InputTextComponent_Template_input_focus_3_listener() {\n          return ctx.onInputFocus();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(4, \"app-field-control-erro\", 3);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"for\", ctx.id);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx.label);\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassMap(ctx.getInputClass());\n        i0.ɵɵproperty(\"type\", ctx.type)(\"id\", ctx.id)(\"required\", ctx.isRequired)(\"formControl\", ctx.control);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"mostrarErro\", ctx.hasError())(\"msgErro\", ctx.getErrorMessage());\n      }\n    },\n    dependencies: [i1.DefaultValueAccessor, i1.NgControlStatus, i1.RequiredValidator, i1.FormControlDirective, i2.FieldControlErroComponent],\n    styles: [\"label[_ngcontent-%COMP%]{color:#fff;white-space:nowrap}.ng-invalid[_ngcontent-%COMP%]{border:1px solid red}\"]\n  });\n  return InputTextComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}